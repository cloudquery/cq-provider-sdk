// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: internal/source/source.proto

package source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceClient is the client API for Source service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceClient interface {
	// Information about what a provider supports/expects
	GetProviderSchema(ctx context.Context, in *GetProviderSchema_Request, opts ...grpc.CallOption) (*GetProviderSchema_Response, error)
	// Gets a provider's configuration example
	GetProviderConfig(ctx context.Context, in *GetProviderConfig_Request, opts ...grpc.CallOption) (*GetProviderConfig_Response, error)
	// Fetch Provider Resources
	FetchResources(ctx context.Context, in *FetchResources_Request, opts ...grpc.CallOption) (Source_FetchResourcesClient, error)
}

type sourceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceClient(cc grpc.ClientConnInterface) SourceClient {
	return &sourceClient{cc}
}

func (c *sourceClient) GetProviderSchema(ctx context.Context, in *GetProviderSchema_Request, opts ...grpc.CallOption) (*GetProviderSchema_Response, error) {
	out := new(GetProviderSchema_Response)
	err := c.cc.Invoke(ctx, "/proto.Source/GetProviderSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) GetProviderConfig(ctx context.Context, in *GetProviderConfig_Request, opts ...grpc.CallOption) (*GetProviderConfig_Response, error) {
	out := new(GetProviderConfig_Response)
	err := c.cc.Invoke(ctx, "/proto.Source/GetProviderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) FetchResources(ctx context.Context, in *FetchResources_Request, opts ...grpc.CallOption) (Source_FetchResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Source_ServiceDesc.Streams[0], "/proto.Source/FetchResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceFetchResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Source_FetchResourcesClient interface {
	Recv() (*FetchResources_Response, error)
	grpc.ClientStream
}

type sourceFetchResourcesClient struct {
	grpc.ClientStream
}

func (x *sourceFetchResourcesClient) Recv() (*FetchResources_Response, error) {
	m := new(FetchResources_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SourceServer is the server API for Source service.
// All implementations must embed UnimplementedSourceServer
// for forward compatibility
type SourceServer interface {
	// Information about what a provider supports/expects
	GetProviderSchema(context.Context, *GetProviderSchema_Request) (*GetProviderSchema_Response, error)
	// Gets a provider's configuration example
	GetProviderConfig(context.Context, *GetProviderConfig_Request) (*GetProviderConfig_Response, error)
	// Fetch Provider Resources
	FetchResources(*FetchResources_Request, Source_FetchResourcesServer) error
	mustEmbedUnimplementedSourceServer()
}

// UnimplementedSourceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServer struct {
}

func (UnimplementedSourceServer) GetProviderSchema(context.Context, *GetProviderSchema_Request) (*GetProviderSchema_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderSchema not implemented")
}
func (UnimplementedSourceServer) GetProviderConfig(context.Context, *GetProviderConfig_Request) (*GetProviderConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderConfig not implemented")
}
func (UnimplementedSourceServer) FetchResources(*FetchResources_Request, Source_FetchResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchResources not implemented")
}
func (UnimplementedSourceServer) mustEmbedUnimplementedSourceServer() {}

// UnsafeSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServer will
// result in compilation errors.
type UnsafeSourceServer interface {
	mustEmbedUnimplementedSourceServer()
}

func RegisterSourceServer(s grpc.ServiceRegistrar, srv SourceServer) {
	s.RegisterService(&Source_ServiceDesc, srv)
}

func _Source_GetProviderSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderSchema_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).GetProviderSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Source/GetProviderSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).GetProviderSchema(ctx, req.(*GetProviderSchema_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_GetProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).GetProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Source/GetProviderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).GetProviderConfig(ctx, req.(*GetProviderConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_FetchResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchResources_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceServer).FetchResources(m, &sourceFetchResourcesServer{stream})
}

type Source_FetchResourcesServer interface {
	Send(*FetchResources_Response) error
	grpc.ServerStream
}

type sourceFetchResourcesServer struct {
	grpc.ServerStream
}

func (x *sourceFetchResourcesServer) Send(m *FetchResources_Response) error {
	return x.ServerStream.SendMsg(m)
}

// Source_ServiceDesc is the grpc.ServiceDesc for Source service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Source_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Source",
	HandlerType: (*SourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviderSchema",
			Handler:    _Source_GetProviderSchema_Handler,
		},
		{
			MethodName: "GetProviderConfig",
			Handler:    _Source_GetProviderConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchResources",
			Handler:       _Source_FetchResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/source/source.proto",
}
