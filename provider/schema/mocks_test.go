package schema

import (
	"context"

	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"
)

// DatabaseMock is an autogenerated mock type for the Database type
type DatabaseMock struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DatabaseMock) Close() {
	_m.Called()
}

// CopyFrom provides a mock function with given fields: ctx, resources, shouldCascade, CascadeDeleteFilters
func (_m *DatabaseMock) CopyFrom(ctx context.Context, resources Resources, shouldCascade bool, CascadeDeleteFilters map[string]interface{}) error {
	ret := _m.Called(ctx, resources, shouldCascade, CascadeDeleteFilters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Resources, bool, map[string]interface{}) error); ok {
		r0 = rf(ctx, resources, shouldCascade, CascadeDeleteFilters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, t, args
func (_m *DatabaseMock) Delete(ctx context.Context, t *Table, args []interface{}) error {
	ret := _m.Called(ctx, t, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Table, []interface{}) error); ok {
		r0 = rf(ctx, t, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *DatabaseMock) Exec(ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, t, instance
func (_m *DatabaseMock) Insert(ctx context.Context, t *Table, instance Resources) error {
	ret := _m.Called(ctx, t, instance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Table, Resources) error); ok {
		r0 = rf(ctx, t, instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *DatabaseMock) Query(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 pgx.Rows
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
