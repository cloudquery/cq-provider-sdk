syntax = "proto3";
package proto;
option go_package = "/internal";

service Provider {
  // Information about what a provider supports/expects
  rpc GetProviderSchema(GetProviderSchema.Request) returns (GetProviderSchema.Response);
  // Gets a provider's configuration example
  rpc GetProviderConfig(GetProviderConfig.Request) returns (GetProviderConfig.Response);
  // One-time initialization, called before other functions below
  rpc ConfigureProvider(ConfigureProvider.Request) returns (ConfigureProvider.Response);
  // Fetch Provider Resources
  rpc FetchResources(FetchResources.Request) returns (stream FetchResources.Response);
  // Gets info about specific module config embedded inside provider
  rpc GetModuleInfo(GetModuleInfo.Request) returns (GetModuleInfo.Response);
}


message ConfigureProvider {
  message Request {
    // Version of cloudquery executing this plugin
    string cloudquery_version = 1;
    // Connection details for connecting to the database
    ConnectionDetails connection = 2;
    // Holds information such as credentials, regions, accounts, etc'
    bytes config = 3;
    // next available index: 7
  }
  message Response {
    string error = 1;
    repeated Diagnostic diagnostics = 2;
  }
}


message FetchResources {
  message Request {
    // list of resources provider is requested to fetch
    repeated string resources = 1;
    // trigger to enable partial fetching
    bool partial_fetching_enabled = 2;
    // if value is more than 0 it enables throttling for concurrent fetch
    uint64 parallel_fetching_limit = 3;
    // approximate maximum goroutines spawned during fetch
    uint64 max_goroutines = 4;
    // Msgpack encoded: Metadata for fetch, used to pass information to cq* resolvers
    bytes metadata = 5;
    // timeout for each parent resource resolve call
    int64 timeout = 6;
  }
  message Response {
    // map of resources that have finished fetching
    map<string, bool> finished_resources = 1;
    // Amount of resources collected so far
    uint64 resource_count = 2;
    // Error value if any, if returned the stream will be canceled
    string error = 3;
    // list of resources where the fetching failed
    repeated PartialFetchFailedResource partial_fetch_failed_resources = 4;
    // fetch summary of resource that finished
    ResourceFetchSummary summary = 5;
    // name of resource that finished
    string resource = 6;
  }
}

// ResourceFetchSummary includes a summarized report of a fetched resource, such as total amount of resources collected,
// status of the fetch and any diagnostics found while executing fetch on it.
message ResourceFetchSummary {
  // Execution status of the resource fetch execution
  enum Status {
    // Execution was completed successfully without any errors/diagnostics
    COMPLETE = 0;
    // Execution failed and wasn't able to fetch any resource
    FAILED = 1;
    // Execution was partial, one or more resources failed to resolve/fetch
    PARTIAL = 2;
    // Execution was canceled preemptively
    CANCELED = 3;
  }
  // Execution status of resource
  Status status = 1;
  // Total Amount of resources collected by this resource
  uint64 resource_count = 2;
  // list of diagnostic returned from a resource fetch
  repeated Diagnostic diagnostics = 3;
}

message PartialFetchFailedResource {
  // table name of the failed resource fetch
  string table_name = 1;
  // root/parent table name
  string root_table_name = 2;
  // root/parent primary key values
  repeated string root_primary_key_values = 3;
  // error message for this resource fetch failure
  string error = 4;
}


message Diagnostic {
  enum Type {
    UNKNOWN = 0;
    RESOLVING = 1;
    ACCESS = 2;
    THROTTLE = 3;
    DATABASE = 4;
    SCHEMA = 5;
    INTERNAL = 6;
  }
  enum Severity {
    INVALID = 0;
    ERROR = 1;
    WARNING = 2;
    PANIC = 3;
  }
  Type type = 1;
  Severity severity = 2;
  string summary = 3;
  string detail = 4;
  string resource = 5;
  Diagnostic redacted = 6;
  repeated string resourceId = 7;
}

message GetProviderSchema {
  message Request {}
  message Response {
    string name = 1;
    string version = 2;
    map<string, Table> resource_tables = 3;
    // next available index: 6
  }
}

message GetProviderConfig {
  message Request {
    // next available index: 2
  }
  message Response {
    string name = 1;
    string version = 2;
    bytes config = 3;
    // next available index: 5
  }
}

message GetModuleInfo {
  message Request {
    string module = 1;
    repeated uint32 preferred_versions = 2;
  }
  message Response {
    map<uint32, ModuleInfo> data = 1;
    repeated uint32 available_versions = 2;
    repeated Diagnostic diagnostics = 3;

    message ModuleInfo {
      repeated ModuleFile files = 1;
      map<string, string> extras = 2;

      message ModuleFile {
        string name = 1;
        bytes contents = 2;
      }
    }
  }
}

// Table is the definition of how a table is defined in a provider
message Table {
  string name = 1;
  string description = 2;
  repeated Column columns = 3;
  repeated Table relations = 4;
  optional TableCreationOptions options = 5;
  string serial = 6;
}

message Column {
  string name = 1;
  string description = 2;
  ColumnType type = 3;
  ColumnMeta meta = 4;
}

message ColumnMeta {
  ResolverMeta resolver = 1;
  bool IgnoreExists = 2;
}

message ResolverMeta {
  string name = 1;
  bool builtin = 2;
}

message TableCreationOptions {
  repeated string PrimaryKeys = 1;
}


enum ColumnType {
  INVALID = 0;
  BOOL = 1;
  SMALLINT = 2;
  INT = 3;
  BIGINT = 4;
  FLOAT = 5;
  UUID = 6;
  STRING = 7;
  BYTE_ARRAY = 8;
  STRING_ARRAY = 9;
  INT_ARRAY = 10;
  TIMESTAMP = 11;
  JSON = 12;
  UUID_ARRAY = 13;
  INET = 14;
  INET_ARRAY = 15;
  CIDR = 16;
  CIDR_ARRAY = 17;
  MAC_ADDR = 18;
  MAC_ADDR_ARRAY = 19;
}

enum ConnectionType {
  POSTGRES = 0;
}

message ConnectionDetails {
  ConnectionType type = 1;
  string dsn = 2;
}
